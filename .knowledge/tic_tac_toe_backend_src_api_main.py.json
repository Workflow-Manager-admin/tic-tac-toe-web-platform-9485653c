{"is_source_file": true, "format": "Python", "description": "This is a backend API implementation for a Tic Tac Toe game using FastAPI. It defines REST endpoints for user registration, authentication, game management, game history, and leaderboard features. The file imports multiple models, security functions, game logic functions, and configures the FastAPI app with middleware and endpoints for gameplay, user management, and stats.", "external_files": ["./models", "./db", "./models_sql", "./security", "./game_logic"], "external_methods": ["get_password_hash", "create_access_token", "get_current_user", "authenticate_user", "get_db", "empty_board", "validate_move", "apply_move", "check_winner", "is_board_full", "next_turn", "best_ai_move"], "published": ["app"], "classes": [{"name": "Game", "description": "SQLAlchemy model representing a game record in the database."}, {"name": "User", "description": "SQLAlchemy model representing a user in the database."}, {"name": "UserRegister", "description": "Pydantic model for user registration input."}, {"name": "UserLogin", "description": "Pydantic model for user login input."}, {"name": "UserOut", "description": "Pydantic model for user output."}, {"name": "Token", "description": "Pydantic model representing authentication token."}, {"name": "GameState", "description": "Model representing the current state of a game."}, {"name": "GameRecord", "description": "Model for returning game records in history endpoints."}, {"name": "UserStats", "description": "User statistics including wins, losses, draws."}, {"name": "LeaderboardEntry", "description": "Entry in the leaderboard showing username and wins."}, {"name": "SessionInfo", "description": "Authentication session info including valid until timestamp."}], "methods": [{"name": "register_user(reg: UserRegister, db: Session = Depends(get_db))", "description": "Endpoint to register a new user ensuring username is unique.", "scope": "", "scopeKind": ""}, {"name": "login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db))", "description": "Authenticate user and return JWT token.", "scope": "", "scopeKind": ""}, {"name": "get_me(current_user: User = Depends(get_current_user))", "description": "Retrieve info about the currently authenticated user.", "scope": "", "scopeKind": ""}, {"name": "get_session_info(current_user: User = Depends(get_current_user))", "description": "Fetch current session information.", "scope": "", "scopeKind": ""}, {"name": "start_game( pvp: bool = Body(..., embed=True, description=\"True for PvP, False for vs AI\"), db: Session = Depends(get_db), current_user: User = Depends(get_current_user) )", "description": "Start a new game session, either PvP or vs AI.", "scope": "", "scopeKind": ""}, {"name": "make_move( game_id: int = Body(..., embed=True), row: int = Body(..., embed=True), col: int = Body(..., embed=True), db: Session = Depends(get_db), current_user: User = Depends(get_current_user) )", "description": "Make a move in an existing game, handle game logic, check for win/draw, and automate AI move if applicable.", "scope": "", "scopeKind": ""}, {"name": "my_games(db: Session = Depends(get_db), current_user: User = Depends(get_current_user))", "description": "Retrieve game history for the current user.", "scope": "", "scopeKind": ""}, {"name": "all_games(db: Session = Depends(get_db))", "description": "Retrieve all game records for admin or stats.", "scope": "", "scopeKind": ""}, {"name": "leaderboard(db: Session = Depends(get_db))", "description": "Get the top players based on wins.", "scope": "", "scopeKind": ""}, {"name": "user_stats(db: Session = Depends(get_db), current_user: User = Depends(get_current_user))", "description": "Get statistics for the logged-in user.", "scope": "", "scopeKind": ""}, {"name": "health_check()", "description": "Health check endpoint to verify service is running.", "scope": "", "scopeKind": ""}], "calls": ["fastapi.FastAPI", "fastapi.HTTPException", "fastapi.status", "fastapi.Depends", "fastapi.Body", "fastapi.middleware.CorsMiddleware", "fastapi.security.OAuth2PasswordRequestForm", "sqlalchemy.orm.Session", "datetime.datetime", "datetime.timedelta", "models.UserRegister", "models.UserLogin", "models.UserOut", "models.Token", "models.Move", "models.GameState", "models.GameRecord", "models.UserStats", "models.LeaderboardEntry", "models.SessionInfo", "db.get_db", "security.get_password_hash", "security.create_access_token", "security.get_current_user", "security.authenticate_user", "game_logic.empty_board", "game_logic.validate_move", "game_logic.apply_move", "game_logic.check_winner", "game_logic.is_board_full", "game_logic.next_turn", "game_logic.best_ai_move", "Base.metadata.create_all", "app.add_middleware", "app.post", "app.get", "app", "db.query", "db.filter", "db.first", "db.commit", "db.refresh", "db.order_by", "db.all"], "search-terms": ["FastAPI backend", "Tic Tac Toe API", "user registration", "game moves", "PvP", "AI opponent", "game state", "leaderboard", "game history", "session management", "JWT authentication"], "state": 2, "file_id": 2, "knowledge_revision": 20, "git_revision": "a1aa9d4a6a4997d9b9bca043085e71ee875347a4", "revision_history": [{"9": "a1aa9d4a6a4997d9b9bca043085e71ee875347a4"}, {"20": "a1aa9d4a6a4997d9b9bca043085e71ee875347a4"}], "ctags": [{"_type": "tag", "name": "all_games", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-platform-9485653c/tic_tac_toe_backend/src/api/main.py", "pattern": "/^def all_games(db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(db: Session = Depends(get_db))"}, {"_type": "tag", "name": "app", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-platform-9485653c/tic_tac_toe_backend/src/api/main.py", "pattern": "/^app = FastAPI($/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "get_me", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-platform-9485653c/tic_tac_toe_backend/src/api/main.py", "pattern": "/^def get_me(current_user: User = Depends(get_current_user)):$/", "language": "Python", "kind": "function", "signature": "(current_user: User = Depends(get_current_user))"}, {"_type": "tag", "name": "get_session_info", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-platform-9485653c/tic_tac_toe_backend/src/api/main.py", "pattern": "/^def get_session_info(current_user: User = Depends(get_current_user)):$/", "language": "Python", "kind": "function", "signature": "(current_user: User = Depends(get_current_user))"}, {"_type": "tag", "name": "health_check", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-platform-9485653c/tic_tac_toe_backend/src/api/main.py", "pattern": "/^def health_check():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "leaderboard", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-platform-9485653c/tic_tac_toe_backend/src/api/main.py", "pattern": "/^def leaderboard(db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(db: Session = Depends(get_db))"}, {"_type": "tag", "name": "login", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-platform-9485653c/tic_tac_toe_backend/src/api/main.py", "pattern": "/^def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db))"}, {"_type": "tag", "name": "make_move", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-platform-9485653c/tic_tac_toe_backend/src/api/main.py", "pattern": "/^def make_move($/", "language": "Python", "kind": "function", "signature": "( game_id: int = Body(..., embed=True), row: int = Body(..., embed=True), col: int = Body(..., embed=True), db: Session = Depends(get_db), current_user: User = Depends(get_current_user) )"}, {"_type": "tag", "name": "my_games", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-platform-9485653c/tic_tac_toe_backend/src/api/main.py", "pattern": "/^def my_games(db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):$/", "language": "Python", "kind": "function", "signature": "(db: Session = Depends(get_db), current_user: User = Depends(get_current_user))"}, {"_type": "tag", "name": "register_user", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-platform-9485653c/tic_tac_toe_backend/src/api/main.py", "pattern": "/^def register_user(reg: UserRegister, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(reg: UserRegister, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "start_game", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-platform-9485653c/tic_tac_toe_backend/src/api/main.py", "pattern": "/^def start_game($/", "language": "Python", "kind": "function", "signature": "( pvp: bool = Body(..., embed=True, description=\"True for PvP, False for vs AI\"), db: Session = Depends(get_db), current_user: User = Depends(get_current_user) )"}, {"_type": "tag", "name": "tags_metadata", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-platform-9485653c/tic_tac_toe_backend/src/api/main.py", "pattern": "/^tags_metadata = [$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "user_stats", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-platform-9485653c/tic_tac_toe_backend/src/api/main.py", "pattern": "/^def user_stats(db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):$/", "language": "Python", "kind": "function", "signature": "(db: Session = Depends(get_db), current_user: User = Depends(get_current_user))"}], "hash": "87f4ab7a35537d7e1ca6530ee08b62fb", "format-version": 4, "code-base-name": "tic_tac_toe_backend", "filename": "tic_tac_toe_backend/src/api/main.py", "fields": [{"name": "app = FastAPI(", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "tags_metadata = [", "scope": "", "scopeKind": "", "description": "unavailable"}]}