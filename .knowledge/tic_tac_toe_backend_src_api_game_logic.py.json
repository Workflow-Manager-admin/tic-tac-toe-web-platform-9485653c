{"is_source_file": true, "format": "Python", "description": "This file contains core game logic functions for a Tic Tac Toe game, including initializing the game board, validating moves, applying moves, checking for a winner, determining if the board is full, managing player turns, and implementing a simple AI strategy for move selection.", "external_files": [], "external_methods": ["random.choice"], "published": ["empty_board", "validate_move", "apply_move", "check_winner", "is_board_full", "next_turn", "best_ai_move"], "classes": [], "methods": [{"name": "List[List[Optional[str]]] empty_board()", "description": "Create and return an empty 3x3 tic tac toe board.", "scope": "", "scopeKind": ""}, {"name": "bool validate_move(board: List[List[Optional[str]]], row: int, col: int)", "description": "Determine if a move is legal: cell is within bounds and empty.", "scope": "", "scopeKind": ""}, {"name": "apply_move(board: List[List[Optional[str]]], row: int, col: int, symbol: str)", "description": "Apply a move to the board and return the new board state.", "scope": "", "scopeKind": ""}, {"name": "Optional[str] check_winner(board: List[List[Optional[str]]])", "description": "Check all lines (rows, columns, diagonals) for a winner, returning 'X', 'O', or None.", "scope": "", "scopeKind": ""}, {"name": "bool is_board_full(board: List[List[Optional[str]]])", "description": "Check whether the board has no empty cells, indicating the game is a draw or finished.", "scope": "", "scopeKind": ""}, {"name": "str next_turn(current: str)", "description": "Switch the current player symbol from 'X' to 'O' or vice versa.", "scope": "", "scopeKind": ""}, {"name": "Tuple[int,int] best_ai_move(board: List[List[Optional[str]]], ai_symbol: str, user_symbol: str)", "description": "Determine the next move for AI: win if possible, block enemy if needed, otherwise pick a random empty cell.", "scope": "", "scopeKind": ""}], "calls": ["check_winner", "random.choice"], "search-terms": ["tic-tac-toe", "game logic", "board validation", "AI move", "winner detection", "apply move", "game state"], "state": 2, "file_id": 9, "knowledge_revision": 19, "git_revision": "", "ctags": [{"_type": "tag", "name": "apply_move", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-platform-9485653c/tic_tac_toe_backend/src/api/game_logic.py", "pattern": "/^def apply_move(board: List[List[Optional[str]]], row: int, col: int, symbol: str):$/", "language": "Python", "kind": "function", "signature": "(board: List[List[Optional[str]]], row: int, col: int, symbol: str)"}, {"_type": "tag", "name": "best_ai_move", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-platform-9485653c/tic_tac_toe_backend/src/api/game_logic.py", "pattern": "/^def best_ai_move(board: List[List[Optional[str]]], ai_symbol: str, user_symbol: str) -> Tuple[in/", "language": "Python", "typeref": "typename:Tuple[int,int]", "kind": "function", "signature": "(board: List[List[Optional[str]]], ai_symbol: str, user_symbol: str)"}, {"_type": "tag", "name": "check_winner", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-platform-9485653c/tic_tac_toe_backend/src/api/game_logic.py", "pattern": "/^def check_winner(board: List[List[Optional[str]]]) -> Optional[str]:$/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "function", "signature": "(board: List[List[Optional[str]]])"}, {"_type": "tag", "name": "empty_board", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-platform-9485653c/tic_tac_toe_backend/src/api/game_logic.py", "pattern": "/^def empty_board() -> List[List[Optional[str]]]:$/", "language": "Python", "typeref": "typename:List[List[Optional[str]]]", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "is_board_full", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-platform-9485653c/tic_tac_toe_backend/src/api/game_logic.py", "pattern": "/^def is_board_full(board: List[List[Optional[str]]]) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(board: List[List[Optional[str]]])"}, {"_type": "tag", "name": "next_turn", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-platform-9485653c/tic_tac_toe_backend/src/api/game_logic.py", "pattern": "/^def next_turn(current: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(current: str)"}, {"_type": "tag", "name": "validate_move", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-web-platform-9485653c/tic_tac_toe_backend/src/api/game_logic.py", "pattern": "/^def validate_move(board: List[List[Optional[str]]], row: int, col: int) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(board: List[List[Optional[str]]], row: int, col: int)"}], "hash": "0d1e1feb7ee08691e154b47710f2a956", "format-version": 4, "code-base-name": "tic_tac_toe_backend", "filename": "tic_tac_toe_backend/src/api/game_logic.py", "revision_history": [{"19": ""}]}